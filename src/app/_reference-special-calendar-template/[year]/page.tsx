import { Metadata } from 'next'
import { notFound } from 'next/navigation'
import { ChevronRight, Calendar, Download, Printer, Moon, Sun, Church, CarFront } from 'lucide-react'
import { Header } from '@/components/Header'
import { Footer } from '@/components/Footer'
import Link from 'next/link'

// Type definitions
type CalendarType = 'tsarkoven' | 'lunen' | 'slunchev' | 'formula-1'

interface ChurchItem {
  date: string
  title: string
  slug: string
  movable: boolean
  nonWorking?: boolean
  note?: string
  icsUrl: string
}

interface LunarPhase {
  dateTime: string
  phase: 'new' | 'firstQuarter' | 'full' | 'lastQuarter'
  icsUrl: string
}

interface SolarExtremes {
  firstSunrise?: string
  lastSunset?: string
}

interface F1Round {
  round: number
  gp: string
  country: string
  circuit: string
  quali: { dateTime: string }
  race: { dateTime: string; laps?: number; isNight?: boolean; hasSprint?: boolean }
  tv?: Array<{ provider: string; url?: string }>
  pageUrl?: string
  icsUrls: { quali: string; race: string }
}

interface ChurchYearData {
  type: 'tsarkoven'
  year: number
  totalItems: number
  nonWorkingCount: number
  movableCount: number
  months: Array<{
    month: number
    items: ChurchItem[]
  }>
  downloads: { icsYearUrl: string; csvUrl: string; jsonUrl: string; pdfUrl: string }
}

interface LunarYearData {
  type: 'lunen'
  year: number
  totalPhases: number
  months: Array<{
    month: number
    phases: LunarPhase[]
    monthUrls: { page: string; ics: string; csv: string }
  }>
  downloads: { icsYearUrl: string; csvUrl: string; jsonUrl: string; pdfUrl: string }
}

interface SolarYearData {
  type: 'slunchev'
  year: number
  city: string
  citySlug: 'sofia' | 'plovdiv' | 'varna' | 'burgas' | 'ruse'
  availableCities: Array<{ name: string; slug: string }>
  months: Array<{
    month: number
    extremes: SolarExtremes
    summary: { shortestDay?: { date: string; length: string }; longestDay?: { date: string; length: string } }
    monthUrls: { page: string; csv: string; json: string }
  }>
  downloads: { csvUrl: string; jsonUrl: string; pdfUrl: string }
}

interface F1YearData {
  type: 'formula-1'
  year: number
  totalRounds: number
  rounds: F1Round[]
  downloads: { icsSeasonUrl: string; csvUrl: string; jsonUrl: string; pdfUrl: string }
}

type YearData = ChurchYearData | LunarYearData | SolarYearData | F1YearData

interface PageProps {
  params: {
    type: string
    year: string
  }
}

// Load data
async function getYearData(type: CalendarType, year: number): Promise<YearData | null> {
  try {
    const data = await import(`@/data/calendar/${type}/${year}.json`)
    return data.default
  } catch {
    return null
  }
}

// Generate static params
export async function generateStaticParams() {
  const types = ['tsarkoven', 'lunen', 'slunchev', 'formula-1']
  const years = [2024, 2025, 2026]
  const params = []
  
  for (const type of types) {
    for (const year of years) {
      params.push({ type, year: String(year) })
    }
  }
  
  return params
}

// Generate metadata
export async function generateMetadata({ params }: PageProps): Promise<Metadata> {
  const type = params.type as CalendarType
  const year = parseInt(params.year, 10)
  const data = await getYearData(type, year)
  if (!data) return {}

  const typeLabels: Record<CalendarType, string> = {
    'tsarkoven': '–¶—ä—Ä–∫–æ–≤–µ–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä',
    'lunen': '–õ—É–Ω–µ–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä',
    'slunchev': '–°–ª—ä–Ω—á–µ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä',
    'formula-1': '–§–æ—Ä–º—É–ª–∞ 1 –∫–∞–ª–µ–Ω–¥–∞—Ä'
  }

  const label = typeLabels[type]
  
  return {
    title: `${label} ${year} | Almanac.bg`,
    description: `${label} –∑–∞ ${year} –≥–æ–¥–∏–Ω–∞ —Å —Ç–æ—á–Ω–∏ –¥–∞—Ç–∏, —á–∞—Å–æ–≤–µ –∏ –¥–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.`,
    keywords: `${label}, ${year}, –ë—ä–ª–≥–∞—Ä–∏—è, –∫–∞–ª–µ–Ω–¥–∞—Ä`,
  }
}

// Helper functions
function getMonthName(month: number): string {
  const names = ['–Ø–Ω—É–∞—Ä–∏', '–§–µ–≤—Ä—É–∞—Ä–∏', '–ú–∞—Ä—Ç', '–ê–ø—Ä–∏–ª', '–ú–∞–π', '–Æ–Ω–∏', '–Æ–ª–∏', '–ê–≤–≥—É—Å—Ç', '–°–µ–ø—Ç–µ–º–≤—Ä–∏', '–û–∫—Ç–æ–º–≤—Ä–∏', '–ù–æ–µ–º–≤—Ä–∏', '–î–µ–∫–µ–º–≤—Ä–∏']
  return names[month - 1]
}

function getMonthNameShort(month: number): string {
  const names = ['—è–Ω', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞–π', '—é–Ω–∏', '—é–ª–∏', '–∞–≤–≥', '—Å–µ–ø', '–æ–∫—Ç', '–Ω–æ–µ', '–¥–µ–∫']
  return names[month - 1]
}

function formatDateTime(dt: string): { date: string; time: string } {
  const d = new Date(dt)
  const date = d.toLocaleDateString('bg-BG', { day: 'numeric', month: 'short' })
  const time = d.toLocaleTimeString('bg-BG', { hour: '2-digit', minute: '2-digit' })
  return { date, time }
}

function getPhaseIcon(phase: string): string {
  const icons: Record<string, string> = {
    'new': 'üåë',
    'firstQuarter': 'üåì',
    'full': 'üåï',
    'lastQuarter': 'üåó'
  }
  return icons[phase] || 'üåô'
}

function getPhaseName(phase: string): string {
  const names: Record<string, string> = {
    'new': '–ù–æ–≤–æ–ª—É–Ω–∏–µ',
    'firstQuarter': '–ü—ä—Ä–≤–∞ —á–µ—Ç–≤—ä—Ä—Ç',
    'full': '–ü—ä–ª–Ω–æ–ª—É–Ω–∏–µ',
    'lastQuarter': '–ü–æ—Å–ª–µ–¥–Ω–∞ —á–µ—Ç–≤—ä—Ä—Ç'
  }
  return names[phase] || phase
}

export default async function SpecialCalendarYearPage({ params }: PageProps) {
  const type = params.type as CalendarType
  const year = parseInt(params.year, 10)
  
  if (!['tsarkoven', 'lunen', 'slunchev', 'formula-1'].includes(type)) {
    notFound()
  }
  
  if (isNaN(year) || year < 2020 || year > 2030) {
    notFound()
  }

  const data = await getYearData(type, year)
  if (!data) {
    notFound()
  }

  const typeLabels: Record<CalendarType, string> = {
    'tsarkoven': '–¶—ä—Ä–∫–æ–≤–µ–Ω',
    'lunen': '–õ—É–Ω–µ–Ω',
    'slunchev': '–°–ª—ä–Ω—á–µ–≤',
    'formula-1': '–§–æ—Ä–º—É–ª–∞ 1'
  }

  const typeIcons: Record<CalendarType, any> = {
    'tsarkoven': Church,
    'lunen': Moon,
    'slunchev': Sun,
    'formula-1': CarFront
  }

  const typeLabel = typeLabels[type]
  const TypeIcon = typeIcons[type]

  const typeIntros: Record<CalendarType, string> = {
    'tsarkoven': '–ì–æ–ª–µ–º–∏ –∏ –º–∞–ª–∫–∏ –ø—Ä–∞–∑–Ω–∏—Ü–∏, –ø–æ–¥–≤–∏–∂–Ω–∏ –¥–∞—Ç–∏ –∏ –±–µ–ª–µ–∂–∫–∏ –∑–∞ –Ω–µ—Ä–∞–±–æ—Ç–Ω–∏ –¥–Ω–∏.',
    'lunen': '–§–∞–∑–∏—Ç–µ —Å —Ç–æ—á–Ω–∏ —á–∞—Å–æ–≤–µ (BG time) –∏ –º–µ—Å–µ—á–Ω–∏ –∏–∑–≥–ª–µ–¥–∏.',
    'slunchev': data.type === 'slunchev' ? `–ò–∑–≥—Ä–µ–≤ –∏ –∑–∞–ª–µ–∑ –∑–∞ ${data.city}, –ø—Ä–æ–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ—Å—Ç –Ω–∞ –¥–µ–Ω—è –ø–æ –º–µ—Å–µ—Ü–∏.` : '',
    'formula-1': '–í—Å–∏—á–∫–∏ –∫—Ä—ä–≥–æ–≤–µ, –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —á–∞—Å–æ–≤–µ –≤ –±—ä–ª–≥–∞—Ä—Å–∫–æ –≤—Ä–µ–º–µ.'
  }

  return (
    <>
      <Header />
      <main className="min-h-screen bg-bg">
        {/* Header */}
        <section className="py-8 px-4 border-b border-border">
          <div className="max-w-7xl mx-auto">
            {/* Breadcrumbs */}
            <nav className="flex items-center text-sm text-muted mb-6" aria-label="Breadcrumb">
              <Link href="/" className="hover:text-text transition-colors">–ù–∞—á–∞–ª–æ</Link>
              <ChevronRight className="h-4 w-4 mx-2" />
              <Link href="/kalendar" className="hover:text-text transition-colors">–ö–∞–ª–µ–Ω–¥–∞—Ä</Link>
              <ChevronRight className="h-4 w-4 mx-2" />
              <Link href={`/kalendar/${type}`} className="hover:text-text transition-colors">{typeLabel}</Link>
              <ChevronRight className="h-4 w-4 mx-2" />
              <span className="text-text font-medium">{year}</span>
            </nav>

            {/* H1 */}
            <div className="flex items-center gap-4 mb-4">
              <TypeIcon className="w-10 h-10 text-primary" />
              <h1 className="text-4xl lg:text-5xl font-bold text-text">
                {typeLabel} –∫–∞–ª–µ–Ω–¥–∞—Ä {year}
              </h1>
            </div>

            {/* Intro */}
            <p className="text-lg text-muted-strong mb-6">
              {typeIntros[type]}
            </p>

            {/* Meta strip */}
            <div className="flex flex-wrap items-center gap-4 text-sm">
              {data.type === 'tsarkoven' && (
                <>
                  <span className="text-muted">–û–±—â–æ —Å—ä–±–∏—Ç–∏—è: <strong className="text-text">{data.totalItems}</strong></span>
                  <span className="text-muted">–ù–µ—Ä–∞–±–æ—Ç–Ω–∏: <strong className="text-critical">{data.nonWorkingCount}</strong></span>
                  <span className="text-muted">–ü–æ–¥–≤–∏–∂–Ω–∏: <strong className="text-warning">{data.movableCount}</strong></span>
                </>
              )}
              {data.type === 'lunen' && (
                <span className="text-muted">–û–±—â–æ —Ñ–∞–∑–∏: <strong className="text-text">{data.totalPhases}</strong></span>
              )}
              {data.type === 'slunchev' && (
                <span className="text-muted">–ì—Ä–∞–¥: <strong className="text-text">{data.city}</strong></span>
              )}
              {data.type === 'formula-1' && (
                <span className="text-muted">–ö—Ä—ä–≥–æ–≤–µ: <strong className="text-text">{data.totalRounds}</strong></span>
              )}
            </div>
          </div>
        </section>

        {/* Sticky Toolbar */}
        <section className="py-4 px-4 bg-panel/30 border-b border-border sticky top-0 z-10">
          <div className="max-w-7xl mx-auto">
            <div className="flex flex-wrap items-center gap-2">
              {/* Year switcher */}
              <div className="flex items-center gap-1">
                <Link
                  href={`/kalendar/${type}/${year - 1}`}
                  className="px-3 h-9 bg-card text-muted border border-border hover:border-primary/40 rounded-lg text-sm transition-colors flex items-center"
                >
                  {year - 1}
                </Link>
                <span className="px-4 h-9 bg-primary text-white rounded-lg text-sm font-bold flex items-center">
                  {year}
                </span>
                <Link
                  href={`/kalendar/${type}/${year + 1}`}
                  className="px-3 h-9 bg-card text-muted border border-border hover:border-primary/40 rounded-lg text-sm transition-colors flex items-center"
                >
                  {year + 1}
                </Link>
              </div>

              <div className="h-6 w-px bg-border mx-2"></div>

              {/* Exports */}
              {data.type === 'tsarkoven' && (
                <>
                  <a href={data.downloads.icsYearUrl} className="px-3 h-9 bg-card text-text border border-border hover:border-primary/40 rounded-lg text-sm transition-colors flex items-center gap-2">
                    <Download className="w-4 h-4" />
                    ICS
                  </a>
                  <a href={data.downloads.csvUrl} className="px-3 h-9 bg-card text-text border border-border hover:border-primary/40 rounded-lg text-sm transition-colors flex items-center gap-2">
                    CSV
                  </a>
                  <a href={data.downloads.pdfUrl} className="px-3 h-9 bg-card text-text border border-border hover:border-primary/40 rounded-lg text-sm transition-colors flex items-center gap-2">
                    <Printer className="w-4 h-4" />
                    PDF
                  </a>
                </>
              )}
              {data.type === 'lunen' && (
                <>
                  <a href={data.downloads.icsYearUrl} className="px-3 h-9 bg-card text-text border border-border hover:border-primary/40 rounded-lg text-sm transition-colors flex items-center gap-2">
                    <Download className="w-4 h-4" />
                    ICS
                  </a>
                  <a href={data.downloads.csvUrl} className="px-3 h-9 bg-card text-text border border-border hover:border-primary/40 rounded-lg text-sm transition-colors flex items-center gap-2">
                    CSV
                  </a>
                </>
              )}
              {data.type === 'slunchev' && (
                <>
                  <a href={data.downloads.csvUrl} className="px-3 h-9 bg-card text-text border border-border hover:border-primary/40 rounded-lg text-sm transition-colors flex items-center gap-2">
                    CSV
                  </a>
                  <a href={data.downloads.jsonUrl} className="px-3 h-9 bg-card text-text border border-border hover:border-primary/40 rounded-lg text-sm transition-colors flex items-center gap-2">
                    JSON
                  </a>
                </>
              )}
              {data.type === 'formula-1' && (
                <>
                  <a href={data.downloads.icsSeasonUrl} className="px-3 h-9 bg-card text-text border border-border hover:border-primary/40 rounded-lg text-sm transition-colors flex items-center gap-2">
                    <Download className="w-4 h-4" />
                    ICS
                  </a>
                  <a href={data.downloads.csvUrl} className="px-3 h-9 bg-card text-text border border-border hover:border-primary/40 rounded-lg text-sm transition-colors flex items-center gap-2">
                    CSV
                  </a>
                </>
              )}
            </div>
          </div>
        </section>

        {/* Legend */}
        <section className="py-6 px-4 bg-soft border-b border-border">
          <div className="max-w-7xl mx-auto">
            <div className="flex flex-wrap items-center gap-4 text-sm">
              {data.type === 'tsarkoven' && (
                <>
                  <span className="flex items-center gap-2"><span className="text-warning text-lg">‚úö</span> –ü—Ä–∞–∑–Ω–∏–∫</span>
                  <span className="flex items-center gap-2"><span className="text-warning">‚Üî</span> –ü–æ–¥–≤–∏–∂–µ–Ω</span>
                  <span className="px-2 py-1 bg-critical text-white rounded text-xs font-medium">–ù–µ—Ä–∞–±–æ—Ç–µ–Ω</span>
                </>
              )}
              {data.type === 'lunen' && (
                <>
                  <span className="flex items-center gap-2"><span className="text-lg">üåë</span> –ù–æ–≤–æ–ª—É–Ω–∏–µ</span>
                  <span className="flex items-center gap-2"><span className="text-lg">üåì</span> –ü—ä—Ä–≤–∞ —á–µ—Ç–≤—ä—Ä—Ç</span>
                  <span className="flex items-center gap-2"><span className="text-lg">üåï</span> –ü—ä–ª–Ω–æ–ª—É–Ω–∏–µ</span>
                  <span className="flex items-center gap-2"><span className="text-lg">üåó</span> –ü–æ—Å–ª–µ–¥–Ω–∞ —á–µ—Ç–≤—ä—Ä—Ç</span>
                  <span className="text-muted">–í—Å–∏—á–∫–∏ —á–∞—Å–æ–≤–µ –≤ –±—ä–ª–≥–∞—Ä—Å–∫–æ –≤—Ä–µ–º–µ</span>
                </>
              )}
              {data.type === 'slunchev' && (
                <>
                  <span className="flex items-center gap-2"><Sun className="w-4 h-4 text-warning" /> –ò–∑–≥—Ä–µ–≤</span>
                  <span className="flex items-center gap-2"><Sun className="w-4 h-4 text-critical" /> –ó–∞–ª–µ–∑</span>
                  <span className="text-muted">–î—ä–ª–∂–∏–Ω–∞ –Ω–∞ –¥–µ–Ω—è</span>
                </>
              )}
              {data.type === 'formula-1' && (
                <>
                  <span className="flex items-center gap-2"><span className="text-lg">üèé</span> –°—ä—Å—Ç–µ–∑–∞–Ω–∏–µ</span>
                  <span className="px-2 py-1 bg-accent text-ink-rare rounded text-xs font-medium">Q</span>
                  <span className="text-xs">–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è</span>
                  <span className="px-2 py-1 bg-primary text-white rounded text-xs font-medium">S</span>
                  <span className="text-xs">–°–ø—Ä–∏–Ω—Ç</span>
                  <span className="text-muted">BG Time</span>
                </>
              )}
            </div>
          </div>
        </section>

        {/* Month Navigator */}
        <section className="py-6 px-4 bg-panel/20">
          <div className="max-w-7xl mx-auto">
            <div className="flex flex-wrap gap-2">
              {Array.from({ length: 12 }, (_, i) => i + 1).map((month) => {
                let count = 0
                if (data.type === 'tsarkoven') {
                  count = data.months.find(m => m.month === month)?.items.length || 0
                } else if (data.type === 'lunen') {
                  count = data.months.find(m => m.month === month)?.phases.length || 0
                } else if (data.type === 'formula-1') {
                  count = data.rounds.filter(r => new Date(r.race.dateTime).getMonth() + 1 === month).length
                }

                return (
                  <a
                    key={month}
                    href={`#month-${month}`}
                    className="px-4 h-10 bg-card text-text border border-border hover:border-primary/40 rounded-lg font-medium transition-colors flex items-center gap-2"
                  >
                    {getMonthNameShort(month)}
                    {count > 0 && <span className="text-xs text-muted">({count})</span>}
                  </a>
                )
              })}
            </div>
          </div>
        </section>

        {/* Content Grid */}
        <section className="py-12 px-4">
          <div className="max-w-7xl mx-auto">
            <div className="grid lg:grid-cols-[1fr,360px] gap-8">
              {/* Main Content */}
              <div className="space-y-8">
                {/* Church Calendar */}
                {data.type === 'tsarkoven' && data.months.map((monthData) => (
                  <div key={monthData.month} id={`month-${monthData.month}`} className="bg-card rounded-2xl border border-border p-6">
                    <h2 className="text-2xl font-bold text-text mb-6">{getMonthName(monthData.month)} {year}</h2>
                    
                    {monthData.items.length > 0 ? (
                      <div className="space-y-3">
                        {monthData.items.map((item, i) => {
                          const date = new Date(item.date)
                          const day = date.getDate()
                          const month = getMonthNameShort(date.getMonth() + 1)
                          
                          return (
                            <div key={i} className="flex items-start gap-4 p-4 bg-panel hover:bg-panel/60 rounded-xl transition-colors">
                              <div className="flex-shrink-0 w-14 h-14 bg-[#FFF0C8] border border-[#F0C770] rounded-lg flex flex-col items-center justify-center leading-tight">
                                <span className="text-[#C95502] font-bold text-lg">{day}</span>
                                <span className="text-[#C95502] font-medium text-xs">{month}</span>
                              </div>
                              
                              <div className="flex-1 min-w-0">
                                <div className="flex items-start justify-between gap-3 mb-2">
                                  <Link
                                    href={`/praznik/${item.slug}/${year}`}
                                    className="text-lg font-semibold text-text hover:text-primary transition-colors"
                                  >
                                    <span className="text-warning mr-2">‚úö</span>
                                    {item.title}
                                  </Link>
                                  <div className="flex flex-wrap gap-2">
                                    {item.movable && (
                                      <span className="px-2 py-0.5 bg-warning/20 text-warning border border-warning/40 rounded text-xs font-medium whitespace-nowrap">
                                        ‚Üî –ü–æ–¥–≤–∏–∂–µ–Ω
                                      </span>
                                    )}
                                    {item.nonWorking && (
                                      <span className="px-2 py-0.5 bg-critical text-white rounded text-xs font-medium whitespace-nowrap">
                                        –ù–µ—Ä–∞–±–æ—Ç–µ–Ω
                                      </span>
                                    )}
                                  </div>
                                </div>
                                
                                {item.note && (
                                  <p className="text-sm text-muted mb-3">{item.note}</p>
                                )}
                                
                                <div className="flex flex-wrap gap-2">
                                  <a
                                    href={item.icsUrl}
                                    className="px-3 py-1.5 bg-card text-text border border-border hover:border-primary/40 rounded-lg text-xs transition-colors"
                                  >
                                    –î–æ–±–∞–≤–∏ ICS
                                  </a>
                                  <button className="px-3 py-1.5 bg-card text-text border border-border hover:border-primary/40 rounded-lg text-xs transition-colors">
                                    –ù–∞–ø–æ–º–Ω–∏
                                  </button>
                                </div>
                              </div>
                            </div>
                          )
                        })}
                      </div>
                    ) : (
                      <p className="text-muted italic">–ù—è–º–∞ —Å—ä–±–∏—Ç–∏—è —Ç–æ–∑–∏ –º–µ—Å–µ—Ü.</p>
                    )}
                  </div>
                ))}

                {/* Lunar Calendar */}
                {data.type === 'lunen' && data.months.map((monthData) => (
                  <div key={monthData.month} id={`month-${monthData.month}`} className="bg-card rounded-2xl border border-border p-6">
                    <div className="flex items-center justify-between mb-6">
                      <h2 className="text-2xl font-bold text-text">{getMonthName(monthData.month)} {year}</h2>
                      <Link
                        href={monthData.monthUrls.page}
                        className="text-sm text-primary hover:underline"
                      >
                        –í–∏–∂ –º–µ—Å–µ—Ü–∞ ‚Üí
                      </Link>
                    </div>
                    
                    <div className="space-y-3">
                      {monthData.phases.map((phase, i) => {
                        const { date, time } = formatDateTime(phase.dateTime)
                        
                        return (
                          <div key={i} className="flex items-center gap-4 p-4 bg-panel rounded-xl">
                            <span className="text-4xl">{getPhaseIcon(phase.phase)}</span>
                            
                            <div className="flex-1">
                              <p className="text-lg font-semibold text-text">{getPhaseName(phase.phase)}</p>
                              <p className="text-sm text-muted">{date} ¬∑ {time}</p>
                            </div>
                            
                            <a
                              href={phase.icsUrl}
                              className="px-3 py-1.5 bg-card text-text border border-border hover:border-primary/40 rounded-lg text-xs transition-colors"
                            >
                              ICS
                            </a>
                          </div>
                        )
                      })}
                    </div>
                  </div>
                ))}

                {/* Solar Calendar */}
                {data.type === 'slunchev' && (
                  <>
                    {/* City selector */}
                    <div className="bg-card rounded-2xl border border-border p-6 mb-8">
                      <h3 className="text-lg font-semibold text-text mb-4">–ò–∑–±–µ—Ä–∏ –≥—Ä–∞–¥</h3>
                      <div className="flex flex-wrap gap-2">
                        {data.availableCities.map((city) => (
                          <Link
                            key={city.slug}
                            href={`/kalendar/slunchev/${city.slug}/${year}`}
                            className={`px-4 h-10 rounded-lg font-medium transition-colors flex items-center ${
                              city.slug === data.citySlug
                                ? 'bg-primary text-white'
                                : 'bg-panel text-text border border-border hover:border-primary/40'
                            }`}
                          >
                            {city.name}
                          </Link>
                        ))}
                      </div>
                    </div>

                    {data.months.map((monthData) => (
                      <div key={monthData.month} id={`month-${monthData.month}`} className="bg-card rounded-2xl border border-border p-6">
                        <div className="flex items-center justify-between mb-6">
                          <h2 className="text-2xl font-bold text-text">{getMonthName(monthData.month)} {year}</h2>
                          <div className="flex gap-2">
                            <a href={monthData.monthUrls.csv} className="text-sm text-primary hover:underline">CSV</a>
                            <span className="text-muted">¬∑</span>
                            <a href={monthData.monthUrls.json} className="text-sm text-primary hover:underline">JSON</a>
                          </div>
                        </div>
                        
                        <div className="grid md:grid-cols-2 gap-4">
                          {monthData.summary.shortestDay && (
                            <div className="p-4 bg-panel rounded-xl">
                              <p className="text-sm text-muted mb-1">–ù–∞–π-–∫—Ä–∞—Ç—ä–∫ –¥–µ–Ω</p>
                              <p className="text-lg font-semibold text-text">{monthData.summary.shortestDay.date}</p>
                              <p className="text-sm text-muted-strong">{monthData.summary.shortestDay.length}</p>
                            </div>
                          )}
                          {monthData.summary.longestDay && (
                            <div className="p-4 bg-panel rounded-xl">
                              <p className="text-sm text-muted mb-1">–ù–∞–π-–¥—ä–ª—ä–≥ –¥–µ–Ω</p>
                              <p className="text-lg font-semibold text-text">{monthData.summary.longestDay.date}</p>
                              <p className="text-sm text-muted-strong">{monthData.summary.longestDay.length}</p>
                            </div>
                          )}
                        </div>

                        <Link
                          href={monthData.monthUrls.page}
                          className="block mt-4 text-center px-4 h-10 bg-primary hover:bg-primary-hover text-white rounded-lg font-medium transition-colors leading-10"
                        >
                          –í–∏–∂ –ø—ä–ª–Ω–∏—è –º–µ—Å–µ—Ü
                        </Link>
                      </div>
                    ))}
                  </>
                )}

                {/* F1 Calendar */}
                {data.type === 'formula-1' && (
                  <div className="space-y-4">
                    {data.rounds.map((round) => {
                      const raceDate = formatDateTime(round.race.dateTime)
                      const qualiDate = formatDateTime(round.quali.dateTime)
                      
                      return (
                        <div key={round.round} className="bg-card rounded-2xl border border-border p-6">
                          <div className="flex items-start justify-between gap-4 mb-4">
                            <div>
                              <div className="flex items-center gap-3 mb-2">
                                <span className="px-3 py-1 bg-panel text-muted font-mono text-sm rounded">
                                  R{round.round}
                                </span>
                                <h3 className="text-2xl font-bold text-text">{round.gp}</h3>
                              </div>
                              <p className="text-sm text-muted">{round.circuit}, {round.country}</p>
                            </div>
                            <div className="flex gap-2">
                              {round.race.hasSprint && (
                                <span className="px-2 py-1 bg-primary text-white rounded text-xs font-medium">S</span>
                              )}
                              {round.race.isNight && (
                                <span className="px-2 py-1 bg-ink-rare text-white rounded text-xs font-medium">Night</span>
                              )}
                            </div>
                          </div>

                          <div className="grid md:grid-cols-2 gap-4 mb-4">
                            <div className="p-4 bg-panel rounded-xl">
                              <div className="flex items-center gap-2 mb-2">
                                <span className="px-2 py-1 bg-accent text-ink-rare rounded text-xs font-medium">Q</span>
                                <p className="text-sm font-semibold text-text">–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è</p>
                              </div>
                              <p className="text-lg font-bold text-text">{qualiDate.date} ¬∑ {qualiDate.time}</p>
                            </div>

                            <div className="p-4 bg-panel rounded-xl">
                              <div className="flex items-center gap-2 mb-2">
                                <span className="text-lg">üèé</span>
                                <p className="text-sm font-semibold text-text">–°—ä—Å—Ç–µ–∑–∞–Ω–∏–µ</p>
                              </div>
                              <p className="text-lg font-bold text-text">{raceDate.date} ¬∑ {raceDate.time}</p>
                              {round.race.laps && (
                                <p className="text-xs text-muted">{round.race.laps} –æ–±–∏–∫–æ–ª–∫–∏</p>
                              )}
                            </div>
                          </div>

                          <div className="flex flex-wrap gap-2">
                            <a href={round.icsUrls.race} className="px-3 py-1.5 bg-primary hover:bg-primary-hover text-white rounded-lg text-xs transition-colors">
                              –î–æ–±–∞–≤–∏ —Å—ä—Å—Ç–µ–∑–∞–Ω–∏–µ
                            </a>
                            <a href={round.icsUrls.quali} className="px-3 py-1.5 bg-card text-text border border-border hover:border-primary/40 rounded-lg text-xs transition-colors">
                              –î–æ–±–∞–≤–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è
                            </a>
                            {round.tv && round.tv.length > 0 && (
                              <button className="px-3 py-1.5 bg-card text-text border border-border hover:border-primary/40 rounded-lg text-xs transition-colors">
                                TV/–°—Ç—Ä–∏–π–º
                              </button>
                            )}
                          </div>
                        </div>
                      )
                    })}
                  </div>
                )}
              </div>

              {/* Sidebar */}
              <aside className="space-y-6">
                {/* Quick Actions */}
                <div className="bg-card rounded-2xl border border-border p-6">
                  <h3 className="text-xl font-bold text-text mb-4">–ò–∑—Ç–µ–≥–ª–∏ —Ü–µ–ª–∏—è {year}</h3>
                  <div className="space-y-2">
                    {data.type === 'tsarkoven' && (
                      <>
                        <a href={data.downloads.icsYearUrl} className="block px-4 h-10 bg-primary hover:bg-primary-hover text-white rounded-lg font-medium transition-colors text-center leading-10">
                          <Download className="w-4 h-4 inline mr-2" />
                          ICS —Ñ–∞–π–ª
                        </a>
                        <a href={data.downloads.csvUrl} className="block px-4 h-10 bg-panel text-text border border-border hover:border-primary/40 rounded-lg font-medium transition-colors text-center leading-10">
                          CSV
                        </a>
                        <a href={data.downloads.pdfUrl} className="block px-4 h-10 bg-panel text-text border border-border hover:border-primary/40 rounded-lg font-medium transition-colors text-center leading-10">
                          <Printer className="w-4 h-4 inline mr-2" />
                          PDF
                        </a>
                      </>
                    )}
                    {data.type === 'lunen' && (
                      <>
                        <a href={data.downloads.icsYearUrl} className="block px-4 h-10 bg-primary hover:bg-primary-hover text-white rounded-lg font-medium transition-colors text-center leading-10">
                          <Download className="w-4 h-4 inline mr-2" />
                          ICS —Ñ–∞–π–ª
                        </a>
                        <a href={data.downloads.csvUrl} className="block px-4 h-10 bg-panel text-text border border-border hover:border-primary/40 rounded-lg font-medium transition-colors text-center leading-10">
                          CSV
                        </a>
                      </>
                    )}
                    {data.type === 'formula-1' && (
                      <a href={data.downloads.icsSeasonUrl} className="block px-4 h-10 bg-primary hover:bg-primary-hover text-white rounded-lg font-medium transition-colors text-center leading-10">
                        <Download className="w-4 h-4 inline mr-2" />
                        –¶–µ–ª–∏—è —Å–µ–∑–æ–Ω (ICS)
                      </a>
                    )}
                  </div>
                </div>

                {/* Cross-links */}
                <div className="bg-card rounded-2xl border border-border p-6">
                  <h3 className="text-xl font-bold text-text mb-4">–î—Ä—É–≥–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–∏</h3>
                  <div className="space-y-2">
                    <Link href={`/kalendar/${year}`} className="block p-3 bg-panel hover:bg-panel/60 rounded-lg transition-colors">
                      <span className="text-text font-medium">–ì–æ–¥–∏—à–µ–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä {year}</span>
                    </Link>
                    {type !== 'tsarkoven' && (
                      <Link href={`/kalendar/tsarkoven/${year}`} className="block p-3 bg-panel hover:bg-panel/60 rounded-lg transition-colors">
                        <span className="text-text font-medium">–¶—ä—Ä–∫–æ–≤–µ–Ω {year}</span>
                      </Link>
                    )}
                    {type !== 'lunen' && (
                      <Link href={`/kalendar/lunen/${year}`} className="block p-3 bg-panel hover:bg-panel/60 rounded-lg transition-colors">
                        <span className="text-text font-medium">–õ—É–Ω–µ–Ω {year}</span>
                      </Link>
                    )}
                    {type !== 'slunchev' && (
                      <Link href={`/kalendar/slunchev/sofia/${year}`} className="block p-3 bg-panel hover:bg-panel/60 rounded-lg transition-colors">
                        <span className="text-text font-medium">–°–ª—ä–Ω—á–µ–≤ {year}</span>
                      </Link>
                    )}
                    {type !== 'formula-1' && (
                      <Link href={`/kalendar/formula-1/${year}`} className="block p-3 bg-panel hover:bg-panel/60 rounded-lg transition-colors">
                        <span className="text-text font-medium">–§–æ—Ä–º—É–ª–∞ 1 {year}</span>
                      </Link>
                    )}
                  </div>
                </div>
              </aside>
            </div>
          </div>
        </section>

        {/* FAQ */}
        <section className="py-12 px-4 bg-panel/30">
          <div className="max-w-7xl mx-auto">
            <h2 className="text-3xl font-bold text-text mb-6">–ß–µ—Å—Ç–æ –∑–∞–¥–∞–≤–∞–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏</h2>
            
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
              {data.type === 'tsarkoven' && (
                <>
                  <div className="bg-card rounded-xl border border-border p-6">
                    <h3 className="text-lg font-semibold text-text mb-3">
                      –ö–∞–∫ —Å–µ –∏–∑—á–∏—Å–ª—è–≤–∞ –í–µ–ª–∏–∫–¥–µ–Ω?
                    </h3>
                    <p className="text-sm text-muted-strong">
                      –í–µ–ª–∏–∫–¥–µ–Ω —Å–µ –∏–∑—á–∏—Å–ª—è–≤–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–∞—Ç–∞ –Ω–∞ –ì–∞—É—Å —Å–ø—Ä—è–º–æ –ø—Ä–æ–ª–µ—Ç–Ω–æ—Ç–æ —Ä–∞–≤–Ω–æ–¥–µ–Ω—Å—Ç–≤–∏–µ –∏ –ª—É–Ω–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä.
                    </p>
                  </div>
                  <div className="bg-card rounded-xl border border-border p-6">
                    <h3 className="text-lg font-semibold text-text mb-3">
                      –ö–æ–∏ –ø—Ä–∞–∑–Ω–∏—Ü–∏ —Å–∞ –Ω–µ—Ä–∞–±–æ—Ç–Ω–∏?
                    </h3>
                    <p className="text-sm text-muted-strong">
                      –ù–µ—Ä–∞–±–æ—Ç–Ω–∏—Ç–µ –¥–Ω–∏ —Å–µ –æ–±—è–≤—è–≤–∞—Ç —Å —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å–∫–∏—è —Å—ä–≤–µ—Ç –∏ –≤–∫–ª—é—á–≤–∞—Ç –æ—Å–Ω–æ–≤–Ω–∏ —Ä–µ–ª–∏–≥–∏–æ–∑–Ω–∏ –∏ –Ω–∞—Ü–∏–æ–Ω–∞–ª–Ω–∏ –ø—Ä–∞–∑–Ω–∏—Ü–∏.
                    </p>
                  </div>
                  <div className="bg-card rounded-xl border border-border p-6">
                    <h3 className="text-lg font-semibold text-text mb-3">
                      –ö–∞–∫–≤–æ –∑–Ω–∞—á–∏ "–ø–æ–¥–≤–∏–∂–µ–Ω –ø—Ä–∞–∑–Ω–∏–∫"?
                    </h3>
                    <p className="text-sm text-muted-strong">
                      –ü–æ–¥–≤–∏–∂–Ω–∏—Ç–µ –ø—Ä–∞–∑–Ω–∏—Ü–∏ –Ω–µ —Å–∞ –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–∞–Ω–∞ –¥–∞—Ç–∞ ‚Äî –∑–∞–≤–∏—Å—è—Ç –æ—Ç –í–µ–ª–∏–∫–¥–µ–Ω –∏ —Å–µ –∏–∑—á–∏—Å–ª—è–≤–∞—Ç –≤—Å—è–∫–∞ –≥–æ–¥–∏–Ω–∞ –Ω–∞–Ω–æ–≤–æ.
                    </p>
                  </div>
                </>
              )}
              
              {data.type === 'lunen' && (
                <>
                  <div className="bg-card rounded-xl border border-border p-6">
                    <h3 className="text-lg font-semibold text-text mb-3">
                      –ß–∞—Å–æ–≤–µ—Ç–µ —Å–∞ –≤ –±—ä–ª–≥–∞—Ä—Å–∫–æ –≤—Ä–µ–º–µ –ª–∏?
                    </h3>
                    <p className="text-sm text-muted-strong">
                      –î–∞, –≤—Å–∏—á–∫–∏ —á–∞—Å–æ–≤–µ —Å–∞ –≤ –±—ä–ª–≥–∞—Ä—Å–∫–æ –≤—Ä–µ–º–µ (EET/EEST —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –∫–æ—Ä–µ–∫—Ü–∏—è –∑–∞ –ª—è—Ç–Ω–æ/–∑–∏–º–Ω–æ —á–∞—Å–æ–≤–æ –≤—Ä–µ–º–µ).
                    </p>
                  </div>
                  <div className="bg-card rounded-xl border border-border p-6">
                    <h3 className="text-lg font-semibold text-text mb-3">
                      –ö–æ–ª–∫–æ —Ç–æ—á–Ω–∏ —Å–∞ –ª—É–Ω–Ω–∏—Ç–µ —Ñ–∞–∑–∏?
                    </h3>
                    <p className="text-sm text-muted-strong">
                      –î–∞–Ω–Ω–∏—Ç–µ —Å–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∏ —Å –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç (¬±1 –º–∏–Ω—É—Ç–∞) –∏ —Å–µ –±–∞–∑–∏—Ä–∞—Ç –Ω–∞ NASA –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.
                    </p>
                  </div>
                  <div className="bg-card rounded-xl border border-border p-6">
                    <h3 className="text-lg font-semibold text-text mb-3">
                      –ö–∞–∫ –¥–∞ –¥–æ–±–∞–≤—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞ —Å–∏?
                    </h3>
                    <p className="text-sm text-muted-strong">
                      –ò–∑—Ç–µ–≥–ª–µ—Ç–µ ICS —Ñ–∞–π–ª–∞ –∏ –≥–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–∞–π—Ç–µ –≤ Google Calendar, Apple Calendar –∏–ª–∏ –¥—Ä—É–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
                    </p>
                  </div>
                </>
              )}

              {data.type === 'slunchev' && (
                <>
                  <div className="bg-card rounded-xl border border-border p-6">
                    <h3 className="text-lg font-semibold text-text mb-3">
                      –ó–∞ –∫–æ–∏ –≥—Ä–∞–¥–æ–≤–µ –µ –≤–∞–ª–∏–¥–Ω–æ?
                    </h3>
                    <p className="text-sm text-muted-strong">
                      –î–∞–Ω–Ω–∏—Ç–µ —Å–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∏ –∑–∞ 5 –æ—Å–Ω–æ–≤–Ω–∏ –≥—Ä–∞–¥–∞: –°–æ—Ñ–∏—è, –ü–ª–æ–≤–¥–∏–≤, –í–∞—Ä–Ω–∞, –ë—É—Ä–≥–∞—Å –∏ –†—É—Å–µ.
                    </p>
                  </div>
                  <div className="bg-card rounded-xl border border-border p-6">
                    <h3 className="text-lg font-semibold text-text mb-3">
                      –ö–∞–∫ —Å–µ –∏–∑—á–∏—Å–ª—è–≤–∞—Ç –¥–∞–Ω–Ω–∏—Ç–µ?
                    </h3>
                    <p className="text-sm text-muted-strong">
                      –ò–∑–ø–æ–ª–∑–≤–∞–º–µ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ —Å GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏—Ç–µ –Ω–∞ –≤—Å–µ–∫–∏ –≥—Ä–∞–¥.
                    </p>
                  </div>
                  <div className="bg-card rounded-xl border border-border p-6">
                    <h3 className="text-lg font-semibold text-text mb-3">
                      –ó–∞—â–æ –∏–º–∞ —Ä–∞–∑–ª–∏–∫–∞ –º–µ–∂–¥—É –≥—Ä–∞–¥–æ–≤–µ—Ç–µ?
                    </h3>
                    <p className="text-sm text-muted-strong">
                      –ò–∑–≥—Ä–µ–≤—ä—Ç –∏ –∑–∞–ª–µ–∑—ä—Ç –∑–∞–≤–∏—Å—è—Ç –æ—Ç –≥–µ–æ–≥—Ä–∞—Ñ—Å–∫–∞—Ç–∞ —à–∏—Ä–∏–Ω–∞ –∏ –¥—ä–ª–∂–∏–Ω–∞ ‚Äî –∫–æ–ª–∫–æ—Ç–æ –ø–æ-–Ω–∞ –∏–∑—Ç–æ–∫/—Å–µ–≤–µ—Ä, —Ç–æ–ª–∫–æ–≤–∞ –ø–æ-—Ä–∞–Ω–æ/–∫—ä—Å–Ω–æ.
                    </p>
                  </div>
                </>
              )}

              {data.type === 'formula-1' && (
                <>
                  <div className="bg-card rounded-xl border border-border p-6">
                    <h3 className="text-lg font-semibold text-text mb-3">
                      –ß–∞—Å–æ–≤–µ—Ç–µ —Å–∞ –≤ –±—ä–ª–≥–∞—Ä—Å–∫–æ –≤—Ä–µ–º–µ –ª–∏?
                    </h3>
                    <p className="text-sm text-muted-strong">
                      –î–∞, –≤—Å–∏—á–∫–∏ —á–∞—Å–æ–≤–µ —Å–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–Ω–∏ –≤ –±—ä–ª–≥–∞—Ä—Å–∫–æ –≤—Ä–µ–º–µ (EET/EEST).
                    </p>
                  </div>
                  <div className="bg-card rounded-xl border border-border p-6">
                    <h3 className="text-lg font-semibold text-text mb-3">
                      –ö–∞–∫ –¥–∞ –¥–æ–±–∞–≤—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞ —Å–∏?
                    </h3>
                    <p className="text-sm text-muted-strong">
                      –ò–∑—Ç–µ–≥–ª–µ—Ç–µ ICS —Ñ–∞–π–ª–∞ –∑–∞ –æ—Ç–¥–µ–ª–Ω–æ —Å—ä—Å—Ç–µ–∑–∞–Ω–∏–µ –∏–ª–∏ —Ü–µ–ª–∏—è —Å–µ–∑–æ–Ω –∏ –≥–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–∞–π—Ç–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ—Ç–æ —Å–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
                    </p>
                  </div>
                  <div className="bg-card rounded-xl border border-border p-6">
                    <h3 className="text-lg font-semibold text-text mb-3">
                      –û—Ç–∫—ä–¥–µ —Å–∞ –¥–∞–Ω–Ω–∏—Ç–µ?
                    </h3>
                    <p className="text-sm text-muted-strong">
                      –û—Ñ–∏—Ü–∏–∞–ª–Ω–∏—è—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä –Ω–∞ FIA, –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω –ø—Ä–∏ –ø—Ä–æ–º–µ–Ω–∏.
                    </p>
                  </div>
                </>
              )}
            </div>
          </div>
        </section>

        {/* Sources */}
        <section className="py-8 px-4 bg-soft border-t border-border">
          <div className="max-w-7xl mx-auto">
            <h3 className="text-xl font-bold text-text mb-4">–ò–∑—Ç–æ—á–Ω–∏—Ü–∏</h3>
            <div className="flex flex-wrap gap-4 text-sm">
              {data.type === 'tsarkoven' && (
                <>
                  <a href="https://bg-patriarshia.bg" className="text-primary hover:underline">–ë—ä–ª–≥–∞—Ä—Å–∫–∞ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–∞ —Ü—ä—Ä–∫–≤–∞</a>
                  <a href="#" className="text-primary hover:underline">–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å–∫–∏ —Å—ä–≤–µ—Ç</a>
                </>
              )}
              {data.type === 'lunen' && (
                <a href="#" className="text-primary hover:underline">NASA Astronomical Algorithms</a>
              )}
              {data.type === 'slunchev' && (
                <a href="#" className="text-primary hover:underline">NOAA Solar Calculator</a>
              )}
              {data.type === 'formula-1' && (
                <a href="https://www.fia.com" className="text-primary hover:underline">FIA Official Calendar</a>
              )}
            </div>
          </div>
        </section>
      </main>
      <Footer />
    </>
  )
}

